<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fs文件系统</title>
    <link href="/2021/07/26/fs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/07/26/fs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="fs文件系统"><a href="#fs文件系统" class="headerlink" title="fs文件系统"></a>fs文件系统</h1>]]></content>
    
    
    <categories>
      
      <category>super</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>fs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Buffer使用</title>
    <link href="/2021/07/25/Buffer%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/25/Buffer%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>缓冲区 暂时存放输入输出数据的一段内存</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> b1 = <span class="hljs-keyword">new</span> Buffer(<span class="hljs-number">12</span>);<br><span class="hljs-comment">//new Buffer中的参数代表字节数，字节（byte），一个字节使用8位二进制表示</span><br><span class="hljs-built_in">console</span>.log(b1);<br>b1.write(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>);<br><span class="hljs-comment">//一个汉字三个字节</span><br><span class="hljs-comment">//b1.write(string,编写的起始位置，写多少个字节，编码格式)</span><br><span class="hljs-built_in">console</span>.log(b1.toString());<br><span class="hljs-comment">//新版写法</span><br><span class="hljs-keyword">let</span> b2 = Buffer.alloc(<span class="hljs-number">12</span>);<span class="hljs-comment">//创造了一个12字节大小的buffer</span><br><span class="hljs-keyword">let</span> b2 = Buffer.alloc(<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;hello&#x27;</span>);<span class="hljs-comment">//会使用默认内容hello重复填充，直到12字节为止</span><br><span class="hljs-built_in">console</span>.log(b2);<span class="hljs-comment">//&lt;Buffer 68 65 6c 6c 6f 68 65 6c 6c 6f 68 65&gt;</span><br><span class="hljs-built_in">console</span>.log(b2.toString());<span class="hljs-comment">//’hellohellohe‘</span><br><span class="hljs-comment">//当填充的内容为汉字的时候，假如12个字节可以盛放4个汉字，那么当只设置11个字节，来盛放</span><br><span class="hljs-comment">//4个汉字，最后一个汉字只能盛放三分之二的字节，可能导致最后一个字乱码</span><br><span class="hljs-keyword">let</span> b3 = Buffer.from(<span class="hljs-string">&quot;hello world&quot;</span>);<span class="hljs-comment">//将参数全部放入buffer中</span><br><span class="hljs-built_in">console</span>.log(b3);<span class="hljs-comment">//&lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;</span><br><span class="hljs-built_in">console</span>.log(b3.toString());<span class="hljs-comment">//hello world</span><br><span class="hljs-comment">//合并多个buffer</span><br><span class="hljs-keyword">let</span> b31 = Buffer.from(<span class="hljs-string">&#x27;hello&#x27;</span>);<br><span class="hljs-keyword">let</span> b32 = Buffer.from(<span class="hljs-string">&#x27;world&#x27;</span>);<br><span class="hljs-keyword">let</span> concatB = Buffer.concat([b31,b32]);<br><span class="hljs-built_in">console</span>.log(concatB3.toString());<span class="hljs-comment">//helloworld</span><br><span class="hljs-built_in">console</span>.log(concatB3);<span class="hljs-comment">//&lt;Buffer 68 65 6c 6c 6f 77 6f 72 6c 64&gt;</span><br><span class="hljs-built_in">console</span>.log(concatB.slice(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>));<span class="hljs-comment">//&lt;Buffer 65 6c&gt;从索引为1的位置，截取到索引为3的位置</span><br><span class="hljs-built_in">console</span>.log(concatB.slice(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>).toString());<span class="hljs-comment">//el</span><br><span class="hljs-comment">//复制</span><br><span class="hljs-keyword">let</span> b4 = Buffer.alloc(<span class="hljs-number">12</span>);<br>b3.copy(b4,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//参数：粘贴到b4，从b4的哪个位置开始贴，从b3哪里开始，到b3哪里结束</span><br><span class="hljs-comment">//b3.copy(b4,b4start,b3start,b3length)</span><br><span class="hljs-built_in">console</span>.log(b4);<span class="hljs-comment">//&lt;Buffer 68 65 6c 6c 6f 00 00 00 00 00 00 00&gt;</span><br><span class="hljs-built_in">console</span>.log(b4.toString());<span class="hljs-comment">//hello</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>super</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>Buffer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>包的管理</title>
    <link href="/2021/07/22/%E5%8C%85%E7%9A%84%E7%AE%A1%E7%90%86/"/>
    <url>/2021/07/22/%E5%8C%85%E7%9A%84%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ul><li><code>npm i -S xxx</code> 与 <code>npm i --save</code>装的包都属于生产依赖</li><li><code>npm i --save-dev xxx</code>与<code>npm i -D xxx</code> 装的包属于开发依赖</li></ul><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul><li><p>包大概分为三类</p><ul><li><p>内置包(fs path url http…)</p><ul><li><p>path Node专门用来处理路径的内置包</p>  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(path.resolve(__dirname,<span class="hljs-string">&#x27;./package.json&#x27;</span>));<br><span class="hljs-comment">//拿到某个文件的绝对路径</span><br><span class="hljs-comment">//path.resolve 与 path.join 的区别</span><br><span class="hljs-comment">//path.resolve能识别出参数里面是绝对路径还是相对路径，相对路径时与</span><br><span class="hljs-comment">//前面的__dirname进行拼接，绝对路径的时候，直接输出参数的绝对路径</span><br><span class="hljs-comment">//path.join只是简单的将两个参数进行拼接，识别不出参数是绝对路径还是相对路径</span><br><span class="hljs-built_in">console</span>.log(path.resolve(__dirname,<span class="hljs-string">&#x27;./package.json&#x27;</span>));<span class="hljs-comment">//-&gt;&quot;/home/xxx/Documents/xxx/package.json&quot;</span><br><span class="hljs-built_in">console</span>.log(path.join(__dirname,<span class="hljs-string">&#x27;./package.json&#x27;</span>));<span class="hljs-comment">//-&gt;&quot;/home/xxx/Document/xxx/package.json&quot;</span><br><span class="hljs-built_in">console</span>.log(path.resolve(__dirname,<span class="hljs-string">&#x27;/package.json&#x27;</span>));<span class="hljs-comment">//-&gt;&quot;/package.json&quot;</span><br><span class="hljs-built_in">console</span>.log(path.join(__dirname,<span class="hljs-string">&#x27;/package.json&#x27;</span>));<span class="hljs-comment">//-&gt;&quot;/home/xxx/Document/xxx/package.json&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>url 用来解析query参数</p>  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;http://baidu.com?q=123&amp;w=234&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(url.parse(str,<span class="hljs-literal">true</span>));<span class="hljs-comment">//query属性变成对象 query: </span><br><span class="hljs-comment">//[Object: null prototype] &#123; q: &#x27;123&#x27;, w: &#x27;234&#x27; &#125;</span><br><span class="hljs-built_in">console</span>.log(url.parse(str));<span class="hljs-comment">//query: &#x27;q=123&amp;w=234&#x27;</span><br><span class="hljs-comment">//新版写法，上面的已废弃</span><br><span class="hljs-keyword">let</span> utr = <span class="hljs-keyword">new</span> URL(str);<br><span class="hljs-built_in">console</span>.log(utr);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    URL &#123;</span><br><span class="hljs-comment">        href: &#x27;http://baidu.com/?q=123&amp;w=234&#x27;,</span><br><span class="hljs-comment">        origin: &#x27;http://baidu.com&#x27;,</span><br><span class="hljs-comment">        protocol: &#x27;http:&#x27;,</span><br><span class="hljs-comment">        username: &#x27;&#x27;,</span><br><span class="hljs-comment">        password: &#x27;&#x27;,</span><br><span class="hljs-comment">        host: &#x27;baidu.com&#x27;,</span><br><span class="hljs-comment">        hostname: &#x27;baidu.com&#x27;,</span><br><span class="hljs-comment">        port: &#x27;&#x27;,</span><br><span class="hljs-comment">        pathname: &#x27;/&#x27;,</span><br><span class="hljs-comment">        search: &#x27;?q=123&amp;w=234&#x27;,</span><br><span class="hljs-comment">        searchParams: URLSearchParams &#123; &#x27;q&#x27; =&gt; &#x27;123&#x27;, &#x27;w&#x27; =&gt; &#x27;234&#x27; &#125;,</span><br><span class="hljs-comment">        hash: &#x27;&#x27;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>三方包</p></li><li><p>自己写的文件(import x form ‘./a’)</p></li></ul></li></ul><h2 id="node的全局变量"><a href="#node的全局变量" class="headerlink" title="node的全局变量"></a>node的全局变量</h2><ul><li>global</li><li>process<ul><li>process.platform 当前执行文件所在的系统</li><li>process.argv<ul><li>获得一个数组，第一项是node的地址 第二项是执行文件的地址，后面的项是执行命令时设置的参数</li></ul></li><li>process.env</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>super</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react基本语法1</title>
    <link href="/2021/07/13/react%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%951/"/>
    <url>/2021/07/13/react%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%951/</url>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><ul><li>单项数据绑定，单项数据流<ul><li><img src="https://z3.ax1x.com/2021/07/13/WkVl2n.jpg" alt="MVC"></li></ul></li></ul><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><ul><li>单向数据绑定，双向数据流<ul><li><img src="https://z3.ax1x.com/2021/07/13/WkEPXV.png" alt="MVVM"></li></ul></li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul><li><code>create-react-app 项目名</code></li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><div class="hljs code-wrapper"><pre><code>- react中所有组件首字母要大写- 严格模式下会进行多次比对，导致多次输出- `&lt;Fragment&gt;&lt;/Fragment&gt;`可以使用空标签，react组件需要有根元素，根元素可以使用空标签- react中所有组件都是函数- 行内样式需要写成对象    - 串型命名的写成驼峰类型- 判断语句 一般使用三元表达式- 循环语句我们一般使用map react会对结构内的数组自动进行拼接- 不能在结构内直接展示对象    - 使用`JSON.stringify()`转换</code></pre></div><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"> <span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br> <span class="hljs-keyword">import</span> ReactDOM frome <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><br> <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello world&#x27;</span>;<br> <span class="hljs-keyword">let</span> sty = &#123;<span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-attr">fontSize</span>:<span class="hljs-string">&#x27;20px&#x27;</span>&#125;;<br> <span class="hljs-keyword">let</span> html1 = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&#123;sty&#125;</span>&gt;</span>&#123;str&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br> <span class="hljs-keyword">let</span> html2 = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&#123;&#123;color:</span>&#x27;<span class="hljs-attr">black</span>&#x27;,<span class="hljs-attr">fontSize:</span>&#x27;<span class="hljs-attr">20px</span>&#x27;&#125;&#125;&gt;</span>&#123;str&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br> <span class="hljs-keyword">let</span> cls = <span class="hljs-string">&#x27;box&#x27;</span>;<br> <span class="hljs-keyword">let</span> ary = [&#123;<span class="hljs-attr">name</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-number">4</span>&#125;]<br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">     在结构中，想要使用变量的时候 需要用&#123;只能写表达式（赋值，变量调用，函数执行，三元表达式）&#125;不能写class，class是关键字,类名需要写成className，react不会进行类名合并，需要手动合并.label标签内的for需要写成htmlFor</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">n</span>)</span>&#123;<br>     <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">2</span>)&#123;<br>         <span class="hljs-keyword">return</span> html1<br>     &#125;<span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-keyword">return</span> html2<br>     &#125;<br> &#125;<br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span> = <span class="hljs-string">&#123;</span>`<span class="hljs-attr">qqq</span> `+<span class="hljs-attr">cls</span>&#125;&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;qqq&#x27;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;qqq&quot;</span>&gt;</span>qqq<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">         &#123;fn(10)&#125;</span><br><span class="xml">         &#123;fn(1)&#125;</span><br><span class="xml">         &#123;1&gt;2?<span class="hljs-tag">&lt;<span class="hljs-name">hi</span>&gt;</span>不可能<span class="hljs-tag">&lt;/<span class="hljs-name">hi</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>1小于2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>&#125;</span><br><span class="xml">         &#123;ary.map((item)=&gt;&#123;</span><br><span class="xml">             return <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.name&#125;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">         &#125;)&#125;</span><br><span class="xml">         &#123;JSON.stringify(sty)&#125;</span><br><span class="xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> &#125;<br> ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;&gt;</span><span class="hljs-tag">&lt;/&gt;</span></span>,getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>super</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两种模块化规范</title>
    <link href="/2021/07/06/%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/"/>
    <url>/2021/07/06/%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><ul><li>node提供了js在服务器上运行的环境</li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li>esModule规范 -&gt; ES6(import export)</li><li>commonjs规范 -&gt; nodejs(require exports)<ul><li>每一个模块，都有<code>require</code> <code>exports</code> <code>module</code> <code>__dirname</code> <code>__filename</code><ul><li><code>__dirname</code> 当前文件所在文件夹的绝对目录</li><li><code>__filename</code> 当前文件的绝对目录</li></ul></li></ul></li></ul><h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><ul><li><code>import xxx from &#39;./aaa.js</code>这种导入对应的 都是该文件的默认导出 <code>export default</code></li><li><code>import &#123;a&#125; from &#39;./aaa.js</code>这种导入对应的是该文件 有名字的导出<code>export let a = xxx</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//commonjs规范</span><br><span class="hljs-comment">//a.js</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    let a = 1;</span><br><span class="hljs-comment">    let b = 2;</span><br><span class="hljs-comment">    exports.a = a;</span><br><span class="hljs-comment">    exports.b = b;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">module</span>.exports&#123;<br>    a:<span class="hljs-number">1</span>,<br>    b:<span class="hljs-number">2</span><br>&#125;<br><span class="hljs-comment">//b.js</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">function add(a,b)&#123;</span><br><span class="hljs-comment">    return a+b</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">function minus(a,b)&#123;</span><br><span class="hljs-comment">    return a-b</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">let obj = &#123;add,minus&#125;;</span><br><span class="hljs-comment">module.exports=obj;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">module</span>.exports&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minus</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> a-b<br>    &#125;<br>&#125;<br><span class="hljs-comment">//index.js</span><br><span class="hljs-keyword">let</span> a_obj = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a.js&#x27;</span>);<br><span class="hljs-keyword">let</span> b_obj = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./b.js&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(a_obj,b_obj);<br><br><span class="hljs-comment">//esModule</span><br><span class="hljs-comment">//index.js</span><br><span class="hljs-keyword">import</span> aaa <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a.js&#x27;</span><span class="hljs-comment">//在esModule中导入文件的格式不能省略，commonjs中可以省略</span><br><span class="hljs-keyword">import</span> bbb <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./b.js&#x27;</span><br><span class="hljs-comment">//import &#123;a,b&#125; from &#x27;./a.js&#x27; 对应导出中需要有名字是a,b的对应导出</span><br><span class="hljs-built_in">console</span>.log(aaa,bbb);<br><span class="hljs-comment">//在html引入index.js时 &lt;script src=&#x27;./index.js&#x27; type=&#x27;module&#x27;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">//a.js</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">200</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    export let a = 100;</span><br><span class="hljs-comment">    export let b = 200;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    a,b<br>&#125;<br><span class="hljs-comment">//b.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minus</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a - b<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    add,minus<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>super</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript类</title>
    <link href="/2021/05/19/TypeScript%E7%B1%BB/"/>
    <url>/2021/05/19/TypeScript%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="TypeScript类"><a href="#TypeScript类" class="headerlink" title="TypeScript类"></a>TypeScript类</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>定义类时，实例的属性需要经过初始化赋值</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    name:<span class="hljs-built_in">string</span>;<br>    age:<span class="hljs-built_in">number</span> = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//age:number;</span><br>    <span class="hljs-comment">//属性“age”没有初始化表达式，且未在构造函数中明确赋值</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//两种初始化方式</span><br>        <span class="hljs-comment">//在构造函数中初始化赋值</span><br>        <span class="hljs-comment">//在表达式上直接赋值</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="存取器-getter-setter"><a href="#存取器-getter-setter" class="headerlink" title="存取器 getter setter"></a>存取器 getter setter</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">namespace</span> a &#123;<br>    <span class="hljs-comment">//Person现在成为命名空间a中的私有类，不会和外面的同名类产生冲突</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        name:<span class="hljs-built_in">string</span>;<br>        age:<span class="hljs-built_in">number</span> = <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//age:number;</span><br>        <span class="hljs-comment">//属性“age”没有初始化表达式，且未在构造函数中明确赋值</span><br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>        &#125;<br>        <span class="hljs-comment">//两种初始化方式</span><br>            <span class="hljs-comment">//在构造函数中初始化赋值</span><br>            <span class="hljs-comment">//在表达式上直接赋值</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在TypeScript中，我们可以通过存取器，来改变一个类中属性的读取和赋值行为</span><br></code></pre></div></td></tr></table></figure><h2 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">namespace</span> b &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name:<span class="hljs-built_in">string</span></span>)</span>&#123;<br>            <span class="hljs-comment">//通过public公开name,name成为实例上的属性</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(p.name);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h2><p>只读属性,通过添加<code>readonly</code>属性,保证被修饰的变量是只读状态</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">namespace</span> c &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> <span class="hljs-keyword">readonly</span> name:<span class="hljs-built_in">string</span></span>)</span>&#123;<br>            <span class="hljs-comment">//通过public公开name,name成为实例上的属性</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(p.name);<br>    <span class="hljs-comment">//p.name = &#x27;world&#x27;;//无法分配到 &quot;name&quot; ，因为它是只读属性</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>子类继承父类后,子类实例上就拥有父类中的属性和方法</li><li>访问修饰符 公开:<code>public</code> 受保护:<code>protected</code> 私有:<code>private</code><ul><li><code>public</code> 自己 自己的子类和其他类都能访问</li><li><code>protected</code> 自己 自己的子类能访问 其他类不能访问</li><li><code>private</code> 只能自己访问</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">namespace</span> d &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        <span class="hljs-keyword">public</span> name:<span class="hljs-built_in">string</span>;<br>        <span class="hljs-keyword">protected</span> age:<span class="hljs-built_in">number</span>;<br>        <span class="hljs-keyword">private</span> tall:<span class="hljs-built_in">number</span>;<br>        <span class="hljs-comment">//&quot;strictPropertyInitialization&quot;: true 表示在类中强制属性初始化,否则报错</span><br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span>,age:<span class="hljs-built_in">number</span>,tall:<span class="hljs-built_in">number</span></span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>            <span class="hljs-built_in">this</span>.tall = tall;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name + <span class="hljs-built_in">this</span>.tall;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">setName</span>(<span class="hljs-params">newName:<span class="hljs-built_in">string</span></span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name = newName;<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>        stuNo:<span class="hljs-built_in">number</span>;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span>,age:<span class="hljs-built_in">number</span>,tall:<span class="hljs-built_in">number</span>,stuNo:<span class="hljs-built_in">number</span></span>)</span>&#123;<br>            <span class="hljs-built_in">super</span>(name,age,tall);<br>            <span class="hljs-built_in">this</span>.stuNo = stuNo;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">getStuNo</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.stuNo+<span class="hljs-built_in">this</span>.name<span class="hljs-comment">//+this.tall;</span><br>            <span class="hljs-comment">//属性“tall”为私有属性，只能在类“Person”中访问;</span><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">setStuNo</span>(<span class="hljs-params">newStuNo:<span class="hljs-built_in">number</span></span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.stuNo = newStuNo;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//p下面现在拥有子类和父类上的所有方法</span><br>    <span class="hljs-comment">//console.log(p.age);//属性“age”受保护，只能在类“Person”及其子类中访问</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="静态属性-静态方法"><a href="#静态属性-静态方法" class="headerlink" title="静态属性 静态方法"></a>静态属性 静态方法</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">namespace</span> e &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        <span class="hljs-keyword">static</span> weight:<span class="hljs-built_in">number</span> = <span class="hljs-number">100</span>;<span class="hljs-comment">//表示这个属性是类的属性,不是实力的属性</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getWeight</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> Person.weight;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><ul><li>装饰器是一种特殊类型的声明，它能够被附加到类声明、方法、属性或参数上，可以修改类的行为</li><li>常见的装饰器有：类装饰器、属性装饰器、参数装饰器和方法装饰器</li><li>装饰器的写法分为普通装饰器和装饰器工厂</li></ul><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">namespace</span> a&#123;<br>    <span class="hljs-keyword">interface</span> Person&#123;<br>        xx:<span class="hljs-built_in">string</span>;<br>        yy:<span class="hljs-built_in">string</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">enhancer</span>(<span class="hljs-params">target:<span class="hljs-built_in">any</span></span>)</span>&#123;<br>        <span class="hljs-comment">//替换类里面的属性</span><br>        target.prototype.xx = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>        target.prototype.yy = <span class="hljs-string">&#x27;world&#x27;</span>;<br>    &#125;<br>    <span class="hljs-meta">@enhancer</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Person();<br>    <span class="hljs-built_in">console</span>.log(p.xx);<span class="hljs-comment">//&#x27;hello&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(p.yy);<span class="hljs-comment">//&#x27;world&#x27;</span><br>&#125;<br><span class="hljs-keyword">namespace</span> b&#123;<br>    <span class="hljs-keyword">interface</span> Person&#123;<br>        age:<span class="hljs-built_in">number</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">enhancer</span>(<span class="hljs-params">target:<span class="hljs-built_in">any</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;<br>            <span class="hljs-comment">//替换整个类</span><br>            <span class="hljs-keyword">public</span> name:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;fu&#x27;</span>;<br>            <span class="hljs-keyword">public</span> age = <span class="hljs-number">10</span>;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-meta">@enhancer</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>        name:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;zi&#x27;</span>;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Person();<br>    <span class="hljs-built_in">console</span>.log(p.name);<span class="hljs-comment">//&#x27;fu&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(p.age);<span class="hljs-comment">//10</span><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>super</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>TS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript函数</title>
    <link href="/2021/05/19/TypeScript%E5%87%BD%E6%95%B0/"/>
    <url>/2021/05/19/TypeScript%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="TypeScript函数"><a href="#TypeScript函数" class="headerlink" title="TypeScript函数"></a>TypeScript函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><ul><li>可以指定参数的类型和返回值的类型</li><li>type用来定义一个类型或者类型别名</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> GetUserNameType = <span class="hljs-function">(<span class="hljs-params">firstName:<span class="hljs-built_in">string</span>,lastName:<span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">string</span>;<br></code></pre></div></td></tr></table></figure><ul><li>函数表达式</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> getUserName:GetUserNameType = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">firstName:<span class="hljs-built_in">string</span>,lastName:<span class="hljs-built_in">string</span></span>):<span class="hljs-title">string</span></span>&#123;<br>    <span class="hljs-keyword">return</span> firstName + lastName;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>可选参数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span>,age:<span class="hljs-built_in">number</span>,home?:<span class="hljs-built_in">string</span></span>)</span>&#123;<br>    <span class="hljs-comment">//可以通过添加?来表示这个参数是可选的</span><br>&#125;<br>print(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;world&#x27;</span>);<br></code></pre></div></td></tr></table></figure><ul><li>默认参数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">url:<span class="hljs-built_in">string</span>,method:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;GET&#x27;</span></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(url,method);<br>&#125;<br>ajax(<span class="hljs-string">&#x27;/user&#x27;</span>);<br><span class="hljs-comment">//如果不传拥有默认值的参数，不会报错，他会走默认值</span><br></code></pre></div></td></tr></table></figure><ul><li>剩余参数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">...numbers:<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt;</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> numbers.reduce(<span class="hljs-function">(<span class="hljs-params">accu,item</span>)=&gt;</span>accu+item,<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</span><br>    <span class="hljs-comment">//arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br>        <span class="hljs-comment">//accumulator 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。</span><br>        <span class="hljs-comment">//currentValue数组中正在处理的元素。</span><br>        <span class="hljs-comment">//index 可选 数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。</span><br>        <span class="hljs-comment">//array可选 调用reduce()的数组</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        initialValue可选 作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 </span><br><span class="hljs-comment">        在没有初始值的空数组上调用 reduce 将报错。</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>函数重载</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> obj:<span class="hljs-built_in">any</span> = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">attr</span>(<span class="hljs-params">val:<span class="hljs-built_in">string</span></span>):<span class="hljs-title">void</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">attr</span>(<span class="hljs-params">val:<span class="hljs-built_in">number</span></span>):<span class="hljs-title">void</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">attr</span>(<span class="hljs-params">val:<span class="hljs-built_in">any</span></span>):<span class="hljs-title">void</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;string&#x27;</span>)&#123;<br>        obj.name = val;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;number&#x27;</span>)&#123;<br>        obj.age = val;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//重载的定义和函数的声明要挨在一起,中间不能有任何有意义的语句</span><br>attr(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>attr(<span class="hljs-number">19</span>);<br><span class="hljs-comment">// attr(true);</span><br><span class="hljs-comment">//没有与此调用匹配的重载。</span><br><span class="hljs-built_in">console</span>.log(obj);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>super</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>TS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript类型</title>
    <link href="/2021/05/06/TypeScript%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/05/06/TypeScript%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="TypeScript类型"><a href="#TypeScript类型" class="headerlink" title="TypeScript类型"></a>TypeScript类型</h1><h2 id="TypeScript安装"><a href="#TypeScript安装" class="headerlink" title="TypeScript安装"></a>TypeScript安装</h2><ul><li><code>npm install -g typescript</code></li><li>生成webpack配置文件<br>  <code>npm init -y</code><ul><li>可以在配置文件中配置运行脚本<ul><li><code>&quot;build&quot;:&quot;tsc&quot;</code></li><li><code>&quot;build:watch&quot;:&quot;tsc --watch&quot;</code></li></ul></li><li>vscode中可以通过终端直接运行任务<ul><li>tsc构建与tsc监视</li></ul></li></ul></li><li>生成ts配置文件：<br>  <code>tsc --init</code><span id="more"></span></li></ul><h3 id="几种模块"><a href="#几种模块" class="headerlink" title="几种模块"></a>几种模块</h3><ul><li>AMD CMD require.js sea.js</li><li>node commonjs commonjs2</li><li>es6 module</li><li>umd 兼容以上三种</li></ul><h3 id="esModuleInterop配置"><a href="#esModuleInterop配置" class="headerlink" title="esModuleInterop配置"></a>esModuleInterop配置</h3><ul><li><code>Enables emit interoperability between CommonJS and ES Modules</code><br>  启用在<code>CommonJS</code>和<code>ES Modules</code>之间的转义</li><li><code>via creation of namespace objects for all imports</code><br>  为所有导出创建一个命名空间对象</li><li><code>Implies &#39;allowSyntheticDefaultImports&#39;</code><br>  默认包含<code>allowSyntheticDefaultImports</code></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h3><ul><li>Cannot redeclare block-scoped variable ‘name’<ul><li>无法重新声明块范围变量“name”</li></ul></li><li>如果代码中有export import之类的代码，那么这个文件就变成了一个模块，这个时候就可以声明全局中存在的<code>name</code>等变量，他现在变成了私有变量</li></ul><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><ul><li>声明数组类型的变量有多种方式<ul><li><code>let hobbies:string[] = [&quot;1&quot;,&quot;2&quot;]</code></li><li><code>let interests:Array&lt;string&gt; = [&quot;1&quot;,&quot;2&quot;];</code></li></ul></li></ul><h3 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h3><ul><li>类似于数组，他是一个长度和类型也都固定的数组<ul><li><code>let point:[number,number] = [1,2];</code></li><li><code>let person:[string,number] = [&quot;name&quot;,10];</code></li></ul></li></ul><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><ul><li>事先考虑某一个变量的所有可能的值，尽量用自然语言中的单词表示他的每一个值</li></ul><h4 id="普通枚举"><a href="#普通枚举" class="headerlink" title="普通枚举"></a>普通枚举</h4><ul><li>对属性未进行赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">enum Gender&#123;<br>    BOY,<br>    GIRL<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`GG是<span class="hljs-subst">$&#123;Gender.BOY&#125;</span>`</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`MM是<span class="hljs-subst">$&#123;Gender.GIRL&#125;</span>`</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`GG是<span class="hljs-subst">$&#123;Gender[<span class="hljs-number">0</span>]&#125;</span>`</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`MM是<span class="hljs-subst">$&#123;Gender[<span class="hljs-number">1</span>]&#125;</span>`</span>);<br><span class="hljs-comment">//ts中的枚举数据类型通过编译后，生成的js，对属性进行了双重指向</span><br><span class="hljs-keyword">var</span> Gender;<br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Gender</span>) </span>&#123;<br>    Gender[Gender[<span class="hljs-string">&quot;BOY&quot;</span>] = <span class="hljs-number">0</span>] = <span class="hljs-string">&quot;BOY&quot;</span>;<br>    Gender[Gender[<span class="hljs-string">&quot;GIRL&quot;</span>] = <span class="hljs-number">1</span>] = <span class="hljs-string">&quot;GIRL&quot;</span>;<br>&#125;)(Gender || (Gender = &#123;&#125;));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GG\u662F&quot;</span> + Gender.BOY);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;MM\u662F&quot;</span> + Gender.GIRL);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GG\u662F&quot;</span> + Gender[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;MM\u662F&quot;</span> + Gender[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//他等同于创建了一个对象Gender</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Gender:&#123;</span><br><span class="hljs-comment">        &#x27;BOY&#x27;:0,</span><br><span class="hljs-comment">        &#x27;GIRL&#x27;:1,</span><br><span class="hljs-comment">        0:&#x27;BOY&#x27;,</span><br><span class="hljs-comment">        1:&#x27;GIRL&#x27;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><ul><li>对属性进行赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">enum Week&#123;<br>    MONDAY = <span class="hljs-number">1</span>,<br>    TUESDAY = <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(Week.MONDAY);<br><span class="hljs-built_in">console</span>.log(Week[<span class="hljs-number">2</span>]);<br><br><span class="hljs-comment">//编译后的结果</span><br><span class="hljs-keyword">var</span> Week;<br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Week</span>) </span>&#123;<br>    Week[Week[<span class="hljs-string">&quot;MONDAY&quot;</span>] = <span class="hljs-number">1</span>] = <span class="hljs-string">&quot;MONDAY&quot;</span>;<br>    Week[Week[<span class="hljs-string">&quot;TUESDAY&quot;</span>] = <span class="hljs-number">2</span>] = <span class="hljs-string">&quot;TUESDAY&quot;</span>;<br>&#125;)(Week || (Week = &#123;&#125;));<br><span class="hljs-built_in">console</span>.log(Week.MONDAY);<br><span class="hljs-built_in">console</span>.log(Week[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">//赋值可以任意，如果赋成相同的值，下面会把上面的值顶替掉</span><br>enum Week&#123;<br>    MONDAY = <span class="hljs-number">1</span>,<br>    TUESDAY = <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(Week.MONDAY);<span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(Week.TUESDAY);<span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(Week.[<span class="hljs-number">1</span>]);<span class="hljs-comment">//TUESDAY</span><br></code></pre></div></td></tr></table></figure><h4 id="常数枚举"><a href="#常数枚举" class="headerlink" title="常数枚举"></a>常数枚举</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> enum Colors&#123;<br>    Red,<br>    Yellow,<br>    Blue<br>&#125;<br><span class="hljs-built_in">console</span>.log(Colors.Red,Colors.Yellow,Colors.Blue);<br><span class="hljs-comment">//他编译成js后</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> <span class="hljs-comment">/* Red */</span>, <span class="hljs-number">1</span> <span class="hljs-comment">/* Yellow */</span>, <span class="hljs-number">2</span> <span class="hljs-comment">/* Blue */</span>);<br><span class="hljs-comment">//前面的代码全部都编译消失了</span><br></code></pre></div></td></tr></table></figure><h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><ul><li>一般情况下尽量不要用</li><li>第三方库没有进行类型有定义 类型转换的时候 数据结构太复杂太灵活 这时候可以使用any</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br>root.style.color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><span class="hljs-comment">//如果上面的root没有指定类型为any，此时下面的root处会报错-&gt;对象可能为 &quot;null&quot;</span><br><span class="hljs-comment">//当把获取元素的值赋给root的时候，他会猜测root的类型，可能为HTMLElement或者null两种</span><br><span class="hljs-comment">//我们可以对root进行强行断言</span><br>root!.style.color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><span class="hljs-comment">//表示我们以确定root的类型一定不为null</span><br><span class="hljs-comment">//其中的style和color都有他们自己的类型，ts为dom提供了一整套的类型声明</span><br></code></pre></div></td></tr></table></figure><h3 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h3><ul><li><code>null</code>空 <code>undefined</code>未定义</li><li><code>null</code>与<code>undefined</code>是其他类型的子类型 可以把他们赋给其他任意类型的变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;strictNullChecks&quot;</span>: <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//当严格模式开启的时候，null与undefined不能赋给其他类型，当为false可以赋给其他类型的值</span><br><span class="hljs-keyword">let</span> x:number;<br>x = <span class="hljs-number">1</span>;<br>x = <span class="hljs-literal">null</span>;<br>x = <span class="hljs-literal">undefined</span>;<br><span class="hljs-comment">//严格模式开启的时候赋值null与undefined有一种情况不会报错</span><br><span class="hljs-keyword">let</span> y:number | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span><br><span class="hljs-keyword">let</span> z:number | <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br></code></pre></div></td></tr></table></figure><h3 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h3><ul><li><code>void</code>类型 空的 没有</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greeting</span>(<span class="hljs-params">name:string</span>):<span class="hljs-title">void</span></span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`hello<span class="hljs-subst">$&#123;name&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//会报错，上面表示返回值为void空的，不能返回值，但是能返回null和undefined，因为他们两个属于void的子类型</span><br>&#125;<br>greeting(<span class="hljs-string">&#x27;world&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h3><ul><li><code>never</code>类型 永远不</li><li><code>never</code>是其他类型的子类型 代表不会出现的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//never的第一种用法</span><br><span class="hljs-comment">//在函数内部永远会抛出错误，导致函数无法正常结束</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">creatErroe</span>(<span class="hljs-params">message:string</span>):<span class="hljs-title">never</span></span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>    <span class="hljs-comment">//返回值为never的函数，不能正常结束，如果函数内正常结束就会报错：返回“从不”的函数不能具有可访问的终结点。</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;end point&#x27;</span>);<br>    <br>&#125;<br><span class="hljs-comment">//never的第二种用法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>):<span class="hljs-title">never</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;end point&#x27;</span>);<span class="hljs-comment">//结束点的语句永远无法执行到，否则就报错</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="amp-amp-amp-区别"><a href="#amp-amp-amp-区别" class="headerlink" title="| || &amp; &amp;&amp;区别"></a><code>|</code> <code>||</code> <code>&amp;</code> <code>&amp;&amp;</code>区别</h3><ul><li><code>|</code> 用在类型上时表示或，用在数字值上是会进行运算的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1:number = <span class="hljs-number">3</span> | <span class="hljs-number">5</span>;<br><span class="hljs-built_in">console</span>.log(num1);<span class="hljs-comment">//输出7</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    3：0   1   1</span><br><span class="hljs-comment">       2^2 2^1 2^0</span><br><span class="hljs-comment">    5：1   0   1</span><br><span class="hljs-comment">       1   1   1 -&gt; 7</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> num2:number = <span class="hljs-number">3</span> || <span class="hljs-number">5</span>;<br><span class="hljs-built_in">console</span>.log(num2);<span class="hljs-comment">//输出3 表示或</span><br><span class="hljs-keyword">let</span> num3:number = <span class="hljs-number">3</span> &amp; <span class="hljs-number">5</span>;<br><span class="hljs-built_in">console</span>.log(num3);<span class="hljs-comment">//1 只有最后面的都是1才取到值</span><br><span class="hljs-keyword">let</span> num4:number = <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-number">5</span>;<br><span class="hljs-built_in">console</span>.log(num4);<span class="hljs-comment">//5 作为真取右</span><br></code></pre></div></td></tr></table></figure><ul><li>ts中没有<code>||``&amp;&amp;``===``!==</code>这些写法</li></ul><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><ul><li>当给变量赋值的时候，他会猜测变量的类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;<span class="hljs-comment">//number类型</span><br>num = <span class="hljs-number">2</span>;<br>num = <span class="hljs-string">&#x27;hello&#x27;</span>;<span class="hljs-comment">//他会报错，不能将类型“string”分配给类型“number” ，前面已经猜出num的类型</span><br><span class="hljs-keyword">let</span> num2;<span class="hljs-comment">//any类型</span><br>num2 = <span class="hljs-number">1</span>;<br>num2 = <span class="hljs-string">&#x27;hello&#x27;</span>;<span class="hljs-comment">//在num2定义的时候，他的类型就已经确定为any类型了，后面也是any类型</span><br></code></pre></div></td></tr></table></figure><h3 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h3><ul><li><p>自动在基本类型和对象类型之间转换</p><ol><li>基本类型上没有方法</li><li>在内部迅速完成一个装箱的操作，把基本类型包装成对象类型，调用对象类型的方法</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name4:string = <span class="hljs-string">&#x27;hello&#x27;</span><br>name4.toLocalLowerCase();<br><br><span class="hljs-keyword">let</span> isOk1:boolean = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">let</span> isOk2:boolean = <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//返回true</span><br><span class="hljs-comment">// let isOk3:boolean = new Boolean(1);//不能将类型“Boolean”分配给类型“boolean”。此时返回的是一个对象</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><ul><li>对类型进行<code>|</code>判断</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name5:number|string;<br>name5 = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>name5.toLowerCase();<br>name5 = <span class="hljs-number">1</span>;<br>name5.toFixed(<span class="hljs-number">3</span>);<br><span class="hljs-comment">//变量能够使用两种类型的私有方法，但是使用方法之前必须确定变量当前是两种类型中的哪个类型</span><br></code></pre></div></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name6:string|number;<br>(name6 <span class="hljs-keyword">as</span> string).toLowerCase();<span class="hljs-comment">//报错：在赋值前使用了变量“name6”</span><br>(name6 <span class="hljs-keyword">as</span> number).toFixed(<span class="hljs-number">2</span>);<br></code></pre></div></td></tr></table></figure><h3 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h3><ul><li>使用字符串数字布尔值字面量组合成联合类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person1:<span class="hljs-string">&#x27;Boy&#x27;</span>|<span class="hljs-string">&#x27;Girl&#x27;</span>;<br>person1 = <span class="hljs-string">&#x27;Boy&#x27;</span>;<br>person1 = <span class="hljs-string">&#x27;Girl&#x27;</span>;<br>person1 = <span class="hljs-string">&#x27;Man&#x27;</span>;<span class="hljs-comment">//报错：不能将类型“&quot;Man&quot;”分配给类型“&quot;Boy&quot; | &quot;Girl&quot;” 像枚举类型 已经固定的值</span><br></code></pre></div></td></tr></table></figure><ul><li>联合类型 VS 字符串字面量类型<ol><li>字符串字面量类型用来约束取值只能某几个字符串中的一个，联合类型表示取值可以是多种类型中的一个</li><li>字符串字面量类型限制了使用该字面量的地方仅接受特定的值，联合类型对于值并没有限定，仅仅限定值的类型需要保持一致</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>super</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>TS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue简单介绍</title>
    <link href="/2021/04/30/vue%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/04/30/vue%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE简单介绍"><a href="#VUE简单介绍" class="headerlink" title="VUE简单介绍"></a>VUE简单介绍</h1><h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul><li>框架: 你写方法,他去调用</li><li>库: 他写方法,你去调用</li></ul><h2 id="VUE2-0"><a href="#VUE2-0" class="headerlink" title="VUE2.0"></a>VUE2.0</h2><ul><li><p><a href="mailto:&#x56;&#x75;&#x65;&#64;&#x32;&#46;&#x30;">&#x56;&#x75;&#x65;&#64;&#x32;&#46;&#x30;</a> 属于一个类</p><span id="more"></span></li><li><p>虚拟DOM: 用JS对象模拟的真实DOM</p>  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br>&#123;<br>    tag:<span class="hljs-string">&#x27;div&#x27;</span>,<br>    props:&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;app&#x27;</span>&#125;,<br>    children:<span class="hljs-literal">null</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>vue指令</p><ul><li>v-test v-html</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    &#123;&#123;&#125;&#125;当中写的都是能够在实例上调用到的属性,当中只能写表达式不能写语句</span><br><span class="hljs-comment">    凡是 v-xxx 的行内属性,统称为vue指令 指令后面跟着的语法等同于&#123;&#123;&#125;&#125;</span><br><span class="hljs-comment">    v-test 相当于innerTest v-html 相当于innerHtml</span><br><span class="hljs-comment">    v-html的安全问题 一定不要用在用户提交的内容上,如果嵌入&lt;script&gt;alert(123)&lt;\/script&gt;,</span><br><span class="hljs-comment">    它会在页面中嵌入script标签,当中的脚本可能造成危险,安全问题属于innerHtml的问题</span><br><span class="hljs-comment">    &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="hljs-comment">    &lt;h2 v-test=&#x27;tags&#x27;&gt;&lt;/h2&gt; -&gt; &lt;i&gt;123&lt;/i&gt;</span><br><span class="hljs-comment">    &lt;h2 v-html=&#x27;tags&#x27;&gt;&lt;/h2&gt; -&gt; 123(斜体)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data:&#123;<br>        name:<span class="hljs-string">&#x27;123&#x27;</span>,<br>        age:<span class="hljs-number">456</span>,<br>        tags:<span class="hljs-string">&#x27;&lt;i&gt;123&lt;/i&gt;&#x27;</span><br>    &#125;<br>&#125;);<br><span class="hljs-comment">//data中的设置的属性都会挂载到Vue当前实例上</span><br></code></pre></div></td></tr></table></figure><ul><li><p>v-model</p>  <figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    v-model 把变量对应的值 赋给input的value属性 </span><br><span class="hljs-comment">    绑定了input框的input事件 当input事件触发的时候会把新值再赋给name(vue实例的私有属性)这个变量</span><br><span class="hljs-comment">    v-model主要用在表单元素上</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>        data:&#123;<br><span class="javascript">            name:<span class="hljs-string">&#x27;123&#x27;</span>,</span><br>            age:456,<br><span class="handlebars"><span class="xml">            tags:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&#x27;</span></span><br>        &#125;<br>    &#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>v-band<br>  v-band是专门用来处理行内属性的一个指令 简写为<code>:</code></p>  <figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-band:src</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>        data:&#123;<br><span class="javascript">            name:<span class="hljs-string">&#x27;123&#x27;</span>,</span><br>            age:456,<br><span class="handlebars"><span class="xml">            tags:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&#x27;,</span></span><br><span class="javascript">            url:<span class="hljs-string">&#x27;xxx.xxx.xxx.jpg&#x27;</span></span><br>        &#125;<br>    &#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
