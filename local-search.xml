<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>learnTS</title>
    <link href="/2021/05/06/learnTS/"/>
    <url>/2021/05/06/learnTS/</url>
    
    <content type="html"><![CDATA[<h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><code>npm install -g typescript</code></li><li>生成webpack配置文件<br>  <code>npm init -y</code><ul><li>可以在配置文件中配置运行脚本<ul><li><code>&quot;build&quot;:&quot;tsc&quot;</code></li><li><code>&quot;build:watch&quot;:&quot;tsc --watch&quot;</code></li></ul></li><li>vscode中可以通过终端直接运行任务<ul><li>tsc构建与tsc监视</li></ul></li></ul></li><li>生成ts配置文件：<br>  <code>tsc --init</code><span id="more"></span></li></ul><h3 id="几种模块"><a href="#几种模块" class="headerlink" title="几种模块"></a>几种模块</h3><ul><li>AMD CMD require.js sea.js</li><li>node commonjs commonjs2</li><li>es6 module</li><li>umd 兼容以上三种</li></ul><h3 id="esModuleInterop配置"><a href="#esModuleInterop配置" class="headerlink" title="esModuleInterop配置"></a>esModuleInterop配置</h3><ul><li><code>Enables emit interoperability between CommonJS and ES Modules</code><br>  启用在<code>CommonJS</code>和<code>ES Modules</code>之间的转义</li><li><code>via creation of namespace objects for all imports</code><br>  为所有导出创建一个命名空间对象</li><li><code>Implies &#39;allowSyntheticDefaultImports&#39;</code><br>  默认包含<code>allowSyntheticDefaultImports</code></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h3><ul><li>Cannot redeclare block-scoped variable ‘name’<ul><li>无法重新声明块范围变量“name”</li></ul></li><li>如果代码中有export import之类的代码，那么这个文件就变成了一个模块，这个时候就可以声明全局中存在的<code>name</code>等变量，他现在变成了私有变量</li></ul><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><ul><li>声明数组类型的变量有多种方式<ul><li><code>let hobbies:string[] = [&quot;1&quot;,&quot;2&quot;]</code></li><li><code>let interests:Array&lt;string&gt; = [&quot;1&quot;,&quot;2&quot;];</code></li></ul></li></ul><h3 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h3><ul><li>类似于数组，他是一个长度和类型也都固定的数组<ul><li><code>let point:[number,number] = [1,2];</code></li><li><code>let person:[string,number] = [&quot;name&quot;,10];</code></li></ul></li></ul><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><ul><li>事先考虑某一个变量的所有可能的值，尽量用自然语言中的单词表示他的每一个值</li></ul><h4 id="普通枚举"><a href="#普通枚举" class="headerlink" title="普通枚举"></a>普通枚举</h4><ul><li>对属性未进行赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">enum Gender&#123;<br>    BOY,<br>    GIRL<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`GG是<span class="hljs-subst">$&#123;Gender.BOY&#125;</span>`</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`MM是<span class="hljs-subst">$&#123;Gender.GIRL&#125;</span>`</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`GG是<span class="hljs-subst">$&#123;Gender[<span class="hljs-number">0</span>]&#125;</span>`</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`MM是<span class="hljs-subst">$&#123;Gender[<span class="hljs-number">1</span>]&#125;</span>`</span>);<br><span class="hljs-comment">//ts中的枚举数据类型通过编译后，生成的js，对属性进行了双重指向</span><br><span class="hljs-keyword">var</span> Gender;<br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Gender</span>) </span>&#123;<br>    Gender[Gender[<span class="hljs-string">&quot;BOY&quot;</span>] = <span class="hljs-number">0</span>] = <span class="hljs-string">&quot;BOY&quot;</span>;<br>    Gender[Gender[<span class="hljs-string">&quot;GIRL&quot;</span>] = <span class="hljs-number">1</span>] = <span class="hljs-string">&quot;GIRL&quot;</span>;<br>&#125;)(Gender || (Gender = &#123;&#125;));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GG\u662F&quot;</span> + Gender.BOY);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;MM\u662F&quot;</span> + Gender.GIRL);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GG\u662F&quot;</span> + Gender[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;MM\u662F&quot;</span> + Gender[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//他等同于创建了一个对象Gender</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Gender:&#123;</span><br><span class="hljs-comment">        &#x27;BOY&#x27;:0,</span><br><span class="hljs-comment">        &#x27;GIRL&#x27;:1,</span><br><span class="hljs-comment">        0:&#x27;BOY&#x27;,</span><br><span class="hljs-comment">        1:&#x27;GIRL&#x27;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><ul><li>对属性进行赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">enum Week&#123;<br>    MONDAY = <span class="hljs-number">1</span>,<br>    TUESDAY = <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(Week.MONDAY);<br><span class="hljs-built_in">console</span>.log(Week[<span class="hljs-number">2</span>]);<br><br><span class="hljs-comment">//编译后的结果</span><br><span class="hljs-keyword">var</span> Week;<br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Week</span>) </span>&#123;<br>    Week[Week[<span class="hljs-string">&quot;MONDAY&quot;</span>] = <span class="hljs-number">1</span>] = <span class="hljs-string">&quot;MONDAY&quot;</span>;<br>    Week[Week[<span class="hljs-string">&quot;TUESDAY&quot;</span>] = <span class="hljs-number">2</span>] = <span class="hljs-string">&quot;TUESDAY&quot;</span>;<br>&#125;)(Week || (Week = &#123;&#125;));<br><span class="hljs-built_in">console</span>.log(Week.MONDAY);<br><span class="hljs-built_in">console</span>.log(Week[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">//赋值可以任意，如果赋成相同的值，下面会把上面的值顶替掉</span><br>enum Week&#123;<br>    MONDAY = <span class="hljs-number">1</span>,<br>    TUESDAY = <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(Week.MONDAY);<span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(Week.TUESDAY);<span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(Week.[<span class="hljs-number">1</span>]);<span class="hljs-comment">//TUESDAY</span><br></code></pre></div></td></tr></table></figure><h4 id="常数枚举"><a href="#常数枚举" class="headerlink" title="常数枚举"></a>常数枚举</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> enum Colors&#123;<br>    Red,<br>    Yellow,<br>    Blue<br>&#125;<br><span class="hljs-built_in">console</span>.log(Colors.Red,Colors.Yellow,Colors.Blue);<br><span class="hljs-comment">//他编译成js后</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> <span class="hljs-comment">/* Red */</span>, <span class="hljs-number">1</span> <span class="hljs-comment">/* Yellow */</span>, <span class="hljs-number">2</span> <span class="hljs-comment">/* Blue */</span>);<br><span class="hljs-comment">//前面的代码全部都编译消失了</span><br></code></pre></div></td></tr></table></figure><h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><ul><li>一般情况下尽量不要用</li><li>第三方库没有进行类型有定义 类型转换的时候 数据结构太复杂太灵活 这时候可以使用any</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>);<br>root.style.color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><span class="hljs-comment">//如果上面的root没有指定类型为any，此时下面的root处会报错-&gt;对象可能为 &quot;null&quot;</span><br><span class="hljs-comment">//当把获取元素的值赋给root的时候，他会猜测root的类型，可能为HTMLElement或者null两种</span><br><span class="hljs-comment">//我们可以对root进行强行断言</span><br>root!.style.color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><span class="hljs-comment">//表示我们以确定root的类型一定不为null</span><br><span class="hljs-comment">//其中的style和color都有他们自己的类型，ts为dom提供了一整套的类型声明</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>super</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typescript</tag>
      
      <tag>TS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue简单介绍</title>
    <link href="/2021/04/30/vue%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/04/30/vue%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE简单介绍"><a href="#VUE简单介绍" class="headerlink" title="VUE简单介绍"></a>VUE简单介绍</h1><h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul><li>框架: 你写方法,他去调用</li><li>库: 他写方法,你去调用</li></ul><h2 id="VUE2-0"><a href="#VUE2-0" class="headerlink" title="VUE2.0"></a>VUE2.0</h2><ul><li><p><a href="mailto:&#86;&#x75;&#x65;&#64;&#x32;&#46;&#x30;">&#86;&#x75;&#x65;&#64;&#x32;&#46;&#x30;</a> 属于一个类</p><span id="more"></span></li><li><p>虚拟DOM: 用JS对象模拟的真实DOM</p>  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br>&#123;<br>    tag:<span class="hljs-string">&#x27;div&#x27;</span>,<br>    props:&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;app&#x27;</span>&#125;,<br>    children:<span class="hljs-literal">null</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>vue指令</p><ul><li>v-test v-html</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    &#123;&#123;&#125;&#125;当中写的都是能够在实例上调用到的属性,当中只能写表达式不能写语句</span><br><span class="hljs-comment">    凡是 v-xxx 的行内属性,统称为vue指令 指令后面跟着的语法等同于&#123;&#123;&#125;&#125;</span><br><span class="hljs-comment">    v-test 相当于innerTest v-html 相当于innerHtml</span><br><span class="hljs-comment">    v-html的安全问题 一定不要用在用户提交的内容上,如果嵌入&lt;script&gt;alert(123)&lt;\/script&gt;,</span><br><span class="hljs-comment">    它会在页面中嵌入script标签,当中的脚本可能造成危险,安全问题属于innerHtml的问题</span><br><span class="hljs-comment">    &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="hljs-comment">    &lt;h2 v-test=&#x27;tags&#x27;&gt;&lt;/h2&gt; -&gt; &lt;i&gt;123&lt;/i&gt;</span><br><span class="hljs-comment">    &lt;h2 v-html=&#x27;tags&#x27;&gt;&lt;/h2&gt; -&gt; 123(斜体)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data:&#123;<br>        name:<span class="hljs-string">&#x27;123&#x27;</span>,<br>        age:<span class="hljs-number">456</span>,<br>        tags:<span class="hljs-string">&#x27;&lt;i&gt;123&lt;/i&gt;&#x27;</span><br>    &#125;<br>&#125;);<br><span class="hljs-comment">//data中的设置的属性都会挂载到Vue当前实例上</span><br></code></pre></div></td></tr></table></figure><ul><li><p>v-model</p>  <figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    v-model 把变量对应的值 赋给input的value属性 </span><br><span class="hljs-comment">    绑定了input框的input事件 当input事件触发的时候会把新值再赋给name(vue实例的私有属性)这个变量</span><br><span class="hljs-comment">    v-model主要用在表单元素上</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>        data:&#123;<br><span class="javascript">            name:<span class="hljs-string">&#x27;123&#x27;</span>,</span><br>            age:456,<br><span class="handlebars"><span class="xml">            tags:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&#x27;</span></span><br>        &#125;<br>    &#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>v-band<br>  v-band是专门用来处理行内属性的一个指令 简写为<code>:</code></p>  <figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-band:src</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>        data:&#123;<br><span class="javascript">            name:<span class="hljs-string">&#x27;123&#x27;</span>,</span><br>            age:456,<br><span class="handlebars"><span class="xml">            tags:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&#x27;,</span></span><br><span class="javascript">            url:<span class="hljs-string">&#x27;xxx.xxx.xxx.jpg&#x27;</span></span><br>        &#125;<br>    &#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
